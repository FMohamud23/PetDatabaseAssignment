package petdatabaseassignment2v2;

import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

// Main class for the Pet Database Program
public class PetDatabaseAssignment2V2 {
    public static void main(String[] args) {
        System.out.println("Pet Database Program.");

        Scanner sc = new Scanner(System.in);
        PetDatabase petDB = new PetDatabase();

        petDB.loadFromFile(); // Load existing pets from file at startup

        int choice;

        // Main loop for menu interaction
        do {
            printMenu(); // Display menu options

            choice = Integer.parseInt(sc.nextLine().trim()); 

            // Handle user choices
            switch (choice) {
                case 1:
                    petDB.viewAllPets(); // View all pets
                    break;
                case 2:
                    petDB.addMorePets(); // Add new pets
                    break;
                case 3:
                    petDB.removePet(); // Remove a pet
                    break;
                case 4:
                    petDB.saveToFile(); // Save pets before exiting
                    System.out.println("Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice."); // Handles out-of-range choices
            }
        } while (choice != 4); // Repeat until user exits
    }

    // Method to display menu options
    public static void printMenu() {
        System.out.println("What would you like to do?");
        System.out.println("1) View all pets");
        System.out.println("2) Add new pets");
        System.out.println("3) Remove a pet");
        System.out.println("4) Exit program");
        System.out.print("Your choice: ");
    }
}

// Class representing a Pet object with name and age
class Pet {
    private static int count = 0;
    private int id;
    private String name;
    private int age;

    public Pet(String name, int age) {
        this.id = count++;
        this.name = name;
        this.age = age;
    }

    public int getId() { return id; }
    public String getName() { return name; }
    public int getAge() { return age; }
}

// Class to manage the pet database and perform all actions
class PetDatabase {
    private ArrayList<Pet> pets = new ArrayList<>();
    private static final String FILE_NAME = "PetData.txt";

    public void loadFromFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.trim().split(" ");
                if (parts.length == 2) {
                    String name = parts[0];
                    int age = Integer.parseInt(parts[1]);
                    pets.add(new Pet(name, age));
                }
            }
        } catch (IOException ignored) {
        }
    }

    public void saveToFile() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_NAME))) {
            for (Pet pet : pets) {
                writer.println(pet.getName() + " " + pet.getAge());
            }
        } catch (IOException e) {
            System.out.println("Error saving pets to file.");
        }
    }

    public void viewAllPets() {
        System.out.println("+----------------------+");
        System.out.printf("| %2s | %-10s | %3s |\n", "ID", "NAME", "AGE");
        System.out.println("+----------------------+");

        for (int i = 0; i < pets.size(); i++) {
            Pet pet = pets.get(i);
            System.out.printf("| %2d | %-10s | %3d |\n", i, pet.getName(), pet.getAge());
        }

        System.out.println("+----------------------+");
        System.out.println(pets.size() + " rows in set.");
    }

    public void addMorePets() {
        Scanner sc = new Scanner(System.in);
        int count = 0;

        while (true) {
            if (pets.size() >= 5) {
                break;
            }

            System.out.print("add pet (name, age): ");
            String input = sc.nextLine().trim();

            if (input.equalsIgnoreCase("done")) break;

            String[] parts = input.split(" ");
            String name = parts[0];
            int age = Integer.parseInt(parts[1]);

            pets.add(new Pet(name, age));
            count++;
        }

        System.out.println(count + " pets added.");
    }

    public void removePet() {
        viewAllPets();
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the pet ID to remove: ");
        int id = Integer.parseInt(sc.nextLine().trim());

        Pet removedPet = pets.remove(id);
        System.out.println(removedPet.getName() + " " + removedPet.getAge() + " is removed.");
    }
}
